{"ast":null,"code":"import _asyncToGenerator from \"/Users/marcovantklooster/Sites/DEV/nl.kerkenit/nl.kerkenit.GodAndMe/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { w as win, d as doc } from './index-b32cad98.js';\nvar KeyboardResize;\n(function (KeyboardResize) {\n  KeyboardResize[\"Body\"] = \"body\";\n  KeyboardResize[\"Ionic\"] = \"ionic\";\n  KeyboardResize[\"Native\"] = \"native\";\n  KeyboardResize[\"None\"] = \"none\";\n})(KeyboardResize || (KeyboardResize = {}));\nconst Keyboard = {\n  getEngine() {\n    var _a;\n    return ((_a = win === null || win === void 0 ? void 0 : win.Capacitor) === null || _a === void 0 ? void 0 : _a.isPluginAvailable('Keyboard')) && (win === null || win === void 0 ? void 0 : win.Capacitor.Plugins.Keyboard);\n  },\n  getResizeMode() {\n    const engine = this.getEngine();\n    if (!(engine === null || engine === void 0 ? void 0 : engine.getResizeMode)) {\n      return Promise.resolve(undefined);\n    }\n    return engine.getResizeMode().catch(e => {\n      if (e.code === 'UNIMPLEMENTED') {\n        // If the native implementation is not available\n        // we treat it the same as if the plugin is not available.\n        return undefined;\n      }\n      throw e;\n    });\n  }\n};\n\n/**\n * The element that resizes when the keyboard opens\n * is going to depend on the resize mode\n * which is why we check that here.\n */\nconst getResizeContainer = resizeMode => {\n  /**\n   * If doc is undefined then we are\n   * in an SSR environment, so the keyboard\n   * adjustment does not apply.\n   * If the webview does not resize then there\n   * is no container to resize.\n   */\n  if (doc === undefined || resizeMode === KeyboardResize.None || resizeMode === undefined) {\n    return null;\n  }\n  /**\n   * The three remaining resize modes: Native, Ionic, and Body\n   * all cause `ion-app` to resize, so we can listen for changes\n   * on that. In the event `ion-app` is not available then\n   * we can fall back to `body`.\n   */\n  const ionApp = doc.querySelector('ion-app');\n  return ionApp !== null && ionApp !== void 0 ? ionApp : doc.body;\n};\n/**\n * Get the height of ion-app or body.\n * This is used for determining if the webview\n * has resized before the keyboard closed.\n * */\nconst getResizeContainerHeight = resizeMode => {\n  const containerElement = getResizeContainer(resizeMode);\n  return containerElement === null ? 0 : containerElement.clientHeight;\n};\n/**\n * Creates a controller that tracks and reacts to opening or closing the keyboard.\n *\n * @internal\n * @param keyboardChangeCallback A function to call when the keyboard opens or closes.\n */\nconst createKeyboardController = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (keyboardChangeCallback) {\n    let keyboardWillShowHandler;\n    let keyboardWillHideHandler;\n    let keyboardVisible;\n    /**\n     * This lets us determine if the webview content\n     * has resized as a result of the keyboard.\n     */\n    let initialResizeContainerHeight;\n    const init = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        const resizeOptions = yield Keyboard.getResizeMode();\n        const resizeMode = resizeOptions === undefined ? undefined : resizeOptions.mode;\n        keyboardWillShowHandler = () => {\n          /**\n           * We need to compute initialResizeContainerHeight right before\n           * the keyboard opens to guarantee the resize container is visible.\n           * The resize container may not be visible if we compute this\n           * as soon as the keyboard controller is created.\n           * We should only need to do this once to avoid additional clientHeight\n           * computations.\n           */\n          if (initialResizeContainerHeight === undefined) {\n            initialResizeContainerHeight = getResizeContainerHeight(resizeMode);\n          }\n          keyboardVisible = true;\n          fireChangeCallback(keyboardVisible, resizeMode);\n        };\n        keyboardWillHideHandler = () => {\n          keyboardVisible = false;\n          fireChangeCallback(keyboardVisible, resizeMode);\n        };\n        win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillShow', keyboardWillShowHandler);\n        win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillHide', keyboardWillHideHandler);\n      });\n      return function init() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    const fireChangeCallback = (state, resizeMode) => {\n      if (keyboardChangeCallback) {\n        keyboardChangeCallback(state, createResizePromiseIfNeeded(resizeMode));\n      }\n    };\n    /**\n     * Code responding to keyboard lifecycles may need\n     * to show/hide content once the webview has\n     * resized as a result of the keyboard showing/hiding.\n     * createResizePromiseIfNeeded provides a way for code to wait for the\n     * resize event that was triggered as a result of the keyboard.\n     */\n    const createResizePromiseIfNeeded = resizeMode => {\n      if (\n      /**\n       * If we are in an SSR environment then there is\n       * no window to resize. Additionally, if there\n       * is no resize mode or the resize mode is \"None\"\n       * then initialResizeContainerHeight will be 0\n       */\n      initialResizeContainerHeight === 0 ||\n      /**\n       * If the keyboard is closed before the webview resizes initially\n       * then the webview will never resize.\n       */\n      initialResizeContainerHeight === getResizeContainerHeight(resizeMode)) {\n        return;\n      }\n      /**\n       * Get the resize container so we can\n       * attach the ResizeObserver below to\n       * the correct element.\n       */\n      const containerElement = getResizeContainer(resizeMode);\n      if (containerElement === null) {\n        return;\n      }\n      /**\n       * Some part of the web content should resize,\n       * and we need to listen for a resize.\n       */\n      return new Promise(resolve => {\n        const callback = () => {\n          /**\n           * As per the spec, the ResizeObserver\n           * will fire when observation starts if\n           * the observed element is rendered and does not\n           * have a size of 0 x 0. However, the watched element\n           * may or may not have resized by the time this first\n           * callback is fired. As a result, we need to check\n           * the dimensions of the element.\n           *\n           * https://www.w3.org/TR/resize-observer/#intro\n           */\n          if (containerElement.clientHeight === initialResizeContainerHeight) {\n            /**\n             * The resize happened, so stop listening\n             * for resize on this element.\n             */\n            ro.disconnect();\n            resolve();\n          }\n        };\n        /**\n         * In Capacitor there can be delay between when the window\n         * resizes and when the container element resizes, so we cannot\n         * rely on a 'resize' event listener on the window.\n         * Instead, we need to determine when the container\n         * element resizes using a ResizeObserver.\n         */\n        const ro = new ResizeObserver(callback);\n        ro.observe(containerElement);\n      });\n    };\n    const destroy = () => {\n      win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillShow', keyboardWillShowHandler);\n      win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillHide', keyboardWillHideHandler);\n      keyboardWillShowHandler = keyboardWillHideHandler = undefined;\n    };\n    const isKeyboardVisible = () => keyboardVisible;\n    yield init();\n    return {\n      init,\n      destroy,\n      isKeyboardVisible\n    };\n  });\n  return function createKeyboardController(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport { KeyboardResize as K, Keyboard as a, createKeyboardController as c };","map":{"version":3,"names":["w","win","d","doc","KeyboardResize","Keyboard","getEngine","_a","Capacitor","isPluginAvailable","Plugins","getResizeMode","engine","Promise","resolve","undefined","catch","e","code","getResizeContainer","resizeMode","None","ionApp","querySelector","body","getResizeContainerHeight","containerElement","clientHeight","createKeyboardController","_ref","_asyncToGenerator","keyboardChangeCallback","keyboardWillShowHandler","keyboardWillHideHandler","keyboardVisible","initialResizeContainerHeight","init","_ref2","resizeOptions","mode","fireChangeCallback","addEventListener","apply","arguments","state","createResizePromiseIfNeeded","callback","ro","disconnect","ResizeObserver","observe","destroy","removeEventListener","isKeyboardVisible","_x","K","a","c"],"sources":["/Users/marcovantklooster/Sites/DEV/nl.kerkenit/nl.kerkenit.GodAndMe/node_modules/@ionic/core/dist/esm/keyboard-controller-71166726.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { w as win, d as doc } from './index-b32cad98.js';\n\nvar KeyboardResize;\n(function (KeyboardResize) {\n  KeyboardResize[\"Body\"] = \"body\";\n  KeyboardResize[\"Ionic\"] = \"ionic\";\n  KeyboardResize[\"Native\"] = \"native\";\n  KeyboardResize[\"None\"] = \"none\";\n})(KeyboardResize || (KeyboardResize = {}));\nconst Keyboard = {\n  getEngine() {\n    var _a;\n    return ((_a = win === null || win === void 0 ? void 0 : win.Capacitor) === null || _a === void 0 ? void 0 : _a.isPluginAvailable('Keyboard')) && (win === null || win === void 0 ? void 0 : win.Capacitor.Plugins.Keyboard);\n  },\n  getResizeMode() {\n    const engine = this.getEngine();\n    if (!(engine === null || engine === void 0 ? void 0 : engine.getResizeMode)) {\n      return Promise.resolve(undefined);\n    }\n    return engine.getResizeMode().catch((e) => {\n      if (e.code === 'UNIMPLEMENTED') {\n        // If the native implementation is not available\n        // we treat it the same as if the plugin is not available.\n        return undefined;\n      }\n      throw e;\n    });\n  },\n};\n\n/**\n * The element that resizes when the keyboard opens\n * is going to depend on the resize mode\n * which is why we check that here.\n */\nconst getResizeContainer = (resizeMode) => {\n  /**\n   * If doc is undefined then we are\n   * in an SSR environment, so the keyboard\n   * adjustment does not apply.\n   * If the webview does not resize then there\n   * is no container to resize.\n   */\n  if (doc === undefined || resizeMode === KeyboardResize.None || resizeMode === undefined) {\n    return null;\n  }\n  /**\n   * The three remaining resize modes: Native, Ionic, and Body\n   * all cause `ion-app` to resize, so we can listen for changes\n   * on that. In the event `ion-app` is not available then\n   * we can fall back to `body`.\n   */\n  const ionApp = doc.querySelector('ion-app');\n  return ionApp !== null && ionApp !== void 0 ? ionApp : doc.body;\n};\n/**\n * Get the height of ion-app or body.\n * This is used for determining if the webview\n * has resized before the keyboard closed.\n * */\nconst getResizeContainerHeight = (resizeMode) => {\n  const containerElement = getResizeContainer(resizeMode);\n  return containerElement === null ? 0 : containerElement.clientHeight;\n};\n/**\n * Creates a controller that tracks and reacts to opening or closing the keyboard.\n *\n * @internal\n * @param keyboardChangeCallback A function to call when the keyboard opens or closes.\n */\nconst createKeyboardController = async (keyboardChangeCallback) => {\n  let keyboardWillShowHandler;\n  let keyboardWillHideHandler;\n  let keyboardVisible;\n  /**\n   * This lets us determine if the webview content\n   * has resized as a result of the keyboard.\n   */\n  let initialResizeContainerHeight;\n  const init = async () => {\n    const resizeOptions = await Keyboard.getResizeMode();\n    const resizeMode = resizeOptions === undefined ? undefined : resizeOptions.mode;\n    keyboardWillShowHandler = () => {\n      /**\n       * We need to compute initialResizeContainerHeight right before\n       * the keyboard opens to guarantee the resize container is visible.\n       * The resize container may not be visible if we compute this\n       * as soon as the keyboard controller is created.\n       * We should only need to do this once to avoid additional clientHeight\n       * computations.\n       */\n      if (initialResizeContainerHeight === undefined) {\n        initialResizeContainerHeight = getResizeContainerHeight(resizeMode);\n      }\n      keyboardVisible = true;\n      fireChangeCallback(keyboardVisible, resizeMode);\n    };\n    keyboardWillHideHandler = () => {\n      keyboardVisible = false;\n      fireChangeCallback(keyboardVisible, resizeMode);\n    };\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillHide', keyboardWillHideHandler);\n  };\n  const fireChangeCallback = (state, resizeMode) => {\n    if (keyboardChangeCallback) {\n      keyboardChangeCallback(state, createResizePromiseIfNeeded(resizeMode));\n    }\n  };\n  /**\n   * Code responding to keyboard lifecycles may need\n   * to show/hide content once the webview has\n   * resized as a result of the keyboard showing/hiding.\n   * createResizePromiseIfNeeded provides a way for code to wait for the\n   * resize event that was triggered as a result of the keyboard.\n   */\n  const createResizePromiseIfNeeded = (resizeMode) => {\n    if (\n    /**\n     * If we are in an SSR environment then there is\n     * no window to resize. Additionally, if there\n     * is no resize mode or the resize mode is \"None\"\n     * then initialResizeContainerHeight will be 0\n     */\n    initialResizeContainerHeight === 0 ||\n      /**\n       * If the keyboard is closed before the webview resizes initially\n       * then the webview will never resize.\n       */\n      initialResizeContainerHeight === getResizeContainerHeight(resizeMode)) {\n      return;\n    }\n    /**\n     * Get the resize container so we can\n     * attach the ResizeObserver below to\n     * the correct element.\n     */\n    const containerElement = getResizeContainer(resizeMode);\n    if (containerElement === null) {\n      return;\n    }\n    /**\n     * Some part of the web content should resize,\n     * and we need to listen for a resize.\n     */\n    return new Promise((resolve) => {\n      const callback = () => {\n        /**\n         * As per the spec, the ResizeObserver\n         * will fire when observation starts if\n         * the observed element is rendered and does not\n         * have a size of 0 x 0. However, the watched element\n         * may or may not have resized by the time this first\n         * callback is fired. As a result, we need to check\n         * the dimensions of the element.\n         *\n         * https://www.w3.org/TR/resize-observer/#intro\n         */\n        if (containerElement.clientHeight === initialResizeContainerHeight) {\n          /**\n           * The resize happened, so stop listening\n           * for resize on this element.\n           */\n          ro.disconnect();\n          resolve();\n        }\n      };\n      /**\n       * In Capacitor there can be delay between when the window\n       * resizes and when the container element resizes, so we cannot\n       * rely on a 'resize' event listener on the window.\n       * Instead, we need to determine when the container\n       * element resizes using a ResizeObserver.\n       */\n      const ro = new ResizeObserver(callback);\n      ro.observe(containerElement);\n    });\n  };\n  const destroy = () => {\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillHide', keyboardWillHideHandler);\n    keyboardWillShowHandler = keyboardWillHideHandler = undefined;\n  };\n  const isKeyboardVisible = () => keyboardVisible;\n  await init();\n  return { init, destroy, isKeyboardVisible };\n};\n\nexport { KeyboardResize as K, Keyboard as a, createKeyboardController as c };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}